###############################################################
# Stage 1 Base builder image with common tooling
###############################################################

FROM registry.access.redhat.com/ubi9/python-311:latest AS builder
USER root

ENV TORCH_VERSION=2.6.0
ENV PYARROW_VERSION=20.0.0
ENV PATH="$HOME/.cargo/bin:$PATH"
ARG TARGETARCH
# Install dependencies
RUN if [ "$TARGETARCH" = "s390x" ]; then \
    dnf --disableplugin=subscription-manager install -y gcc-toolset-13 make wget unzip rust cargo gcc-gfortran python3-devel openblas-devel pkgconfig  && \
    dnf --disableplugin=subscription-manager clean all && \
    pip install --upgrade pip 'cmake<4' setuptools wheel \
; fi

# Create a dummy file to trigger build dependency
RUN touch /tmp/control

###############################################################
# Stage 2 to build Arrow
###############################################################

FROM builder AS arrow-builder
USER root

ARG TARGETARCH
RUN mkdir -p /arrowwheels

RUN if [ "$TARGETARCH" = "s390x" ]; then \
    git clone -b apache-arrow-${PYARROW_VERSION} https://github.com/apache/arrow.git --recursive && \
    cd arrow && rm -rf .git && mkdir dist                                  && \
    pip3 install -r python/requirements-build.txt                          && \
    export ARROW_HOME=$(pwd)/dist                                          && \
    export LD_LIBRARY_PATH=$(pwd)/dist/lib:$LD_LIBRARY_PATH                && \
    export CMAKE_PREFIX_PATH=$ARROW_HOME:$CMAKE_PREFIX_PATH                && \
    export PARQUET_TEST_DATA="${PWD}/cpp/submodules/parquet-testing/data"  && \
    export ARROW_TEST_DATA="${PWD}/testing/data"                           && \
    cmake -S cpp -B cpp/build                                                 \
        -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \
        -DCMAKE_BUILD_TYPE=release         \
        -DARROW_WITH_BZ2=ON                \
        -DARROW_WITH_ZLIB=ON               \
        -DARROW_WITH_ZSTD=ON               \
        -DARROW_WITH_LZ4=ON                \
        -DARROW_WITH_SNAPPY=ON             \
        -DARROW_WITH_BROTLI=ON             \
        -DARROW_DATASET=ON                 \
        -DARROW_FILESYSTEM=ON              \
        -DARROW_COMPUTE=ON                 \
        -DARROW_JSON=ON                    \
        -DARROW_CSV=ON                     \
        -DARROW_PYTHON=ON                  \
        -DARROW_PARQUET=ON                 \
        -DARROW_ORC=ON                     \
        -DARROW_BUILD_SHARED=ON            \
        -DARROW_BUILD_TESTS=OFF         && \
    cd cpp/build                        && \
    make -j20 install                   && \
    export PYARROW_PARALLEL=20          && \
    export PYARROW_WITH_PARQUET=1       && \
    export PYARROW_WITH_DATASET=1       && \
    export PYARROW_BUNDLE_ARROW_CPP=1   && \
    pip3 install wheel                  && \
    cd ../../python                     && \
    python setup.py build_ext              \
        --build-type=release               \
        --bundle-arrow-cpp                 \
        bdist_wheel --dist-dir /arrowwheels/ \
; fi
###############################################################
# Stage 3 to build PyTorch
###############################################################

FROM builder AS torch-builder
USER root

ARG MAX_JOBS
ARG _GLIBCXX_USE_CXX11_ABI=1
RUN mkdir -p /torchwheels

ARG TARGETARCH
RUN if [ "$TARGETARCH" = "s390x" ]; then \
    source /opt/rh/gcc-toolset-13/enable &&  \
    git clone --recursive https://github.com/pytorch/pytorch.git -b v${TORCH_VERSION} && \
    cd pytorch && pip install -r requirements.txt && \
    python setup.py develop                       && \
    rm -f dist/torch*+git*whl                     && \
    PYTORCH_BUILD_VERSION=${TORCH_VERSION} PYTORCH_BUILD_NUMBER=1 pip wheel . --wheel-dir /torchwheels/ \
; fi

###############################################################
# Stage 4 to build Final Image
###############################################################

FROM builder AS final-build
USER root

ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
ENV PATH="$HOME/.cargo/bin:$PATH"

# Dummy file to trigger build dependency
COPY --from=torch-builder /tmp/control /dev/null
COPY --from=arrow-builder /tmp/control /dev/null

# Install PyTorch and Arrow wheels
ARG TARGETARCH
RUN --mount=type=cache,from=torch-builder,source=/torchwheels/,target=/torchwheels/,ro \
    --mount=type=cache,from=arrow-builder,source=/arrowwheels/,target=/arrowwheels/,ro \
    if [ "$TARGETARCH" = "s390x" ]; then \
        HOME=/root pip install /arrowwheels/*.whl /torchwheels/*.whl ; \
    fi

RUN sed -i.bak 's/include-system-site-packages = false/include-system-site-packages = true/' /opt/app-root/pyvenv.cfg

# Copy license
COPY LICENSE.md /licenses/lm-evaluation-harness.md

WORKDIR /opt/app-root/src
COPY . .

# Copy the pinned requirements file
COPY requirements.txt .

# Install the pinned dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install the package
RUN pip install --no-cache-dir --no-deps -e .

USER default

RUN mkdir /opt/app-root/src/hf_home && chmod g+rwx /opt/app-root/src/hf_home                     && \
    mkdir /opt/app-root/src/output && chmod g+rwx /opt/app-root/src/output                       && \
    mkdir /opt/app-root/src/my_tasks && chmod g+rwx /opt/app-root/src/my_tasks                   && \
    mkdir -p /opt/app-root/src/my_catalogs/cards && chmod -R g+rwx /opt/app-root/src/my_catalogs && \
    mkdir -p /opt/app-root/src/.cache

ENV PATH="/opt/app-root/bin:/opt/app-root/src/.local/bin/:/opt/app-root/src/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

RUN python -c 'from lm_eval.tasks.unitxt import task; import os.path; print("class: !function " + task.__file__.replace("task.py", "task.Unitxt"))' > ./my_tasks/unitxt

ENV PYTHONPATH=/opt/app-root/src/.local/lib/python3.11/site-packages:/opt/app-root/src/lm-evaluation-harness:/opt/app-root/src:/opt/app-root/src/server
ENV HF_HOME=/opt/app-root/src/hf_home
ENV UNITXT_CATALOGS=/opt/app-root/src/my_catalogs

USER 65532:65532
CMD ["/opt/app-root/bin/python"]
